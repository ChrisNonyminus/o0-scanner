import os
import platform
import regex as re
import argparse

parser = argparse.ArgumentParser()

parser.add_argument(
    "-i", "--directory", required=True, help="Directory of binary files to scan in."
)
parser.add_argument(
    "-t",
    "--type",
    required=True,
    help='Type of binary file to scan.',
)
args = parser.parse_args()

# print(args.directory)
# print(args.type)

files = []


class BinaryType:
    def __init__(
        self,
        name: str,
        extension: list[str],
        regexPatternString,
        overlapped: bool,
        patternDescription: str,
    ) -> None:
        self.name = name
        self.extension = extension
        self.regexPatternString = regexPatternString
        self.overlapped = overlapped
        self.patternDescription = patternDescription
        pass

    pass


binaryTypes: dict[str, BinaryType] = {}

binaryTypes["n64-ido"] = BinaryType(
    name="n64-ido",
    extension=[".N64", ".NDD"],
    regexPatternString=b"[\s\S][\s\S][\s\S]\x08\x00\x00\x00\x00[\s\S][\s\S][\s\S]\x08\x00\x00\x00\x00",
    overlapped=False,
    patternDescription="double instances of jr instructions followed by nops",
)

binaryTypes["gba"] = BinaryType(
    name="gba",
    extension=[".GBA"],
    regexPatternString=b"\x80\xb5\x6f\x46",
    overlapped=False,
    patternDescription="what seems like a prolog often generated by agbcc o0",
)

binaryTypes["dos-watcom"] = BinaryType(
    name="dos-watcom",
    extension=[".EXE"],
    regexPatternString=b"\x5F\x5E\x5A\x59\x5B\x5D\xC3",
    overlapped=True,
    patternDescription='"chunky" stack popping epilogs',
)

binaryTypes["win32-msvc"] = BinaryType(
    name="win32-msvc",
    extension=[".EXE"],
    regexPatternString=b"\x55\x89\x8b\xec[^\xc3\xc2]*\x5d[\xc3\xc2]",
    overlapped=True,
    patternDescription="excessive use of the stack",
)


results = []

if args.type in binaryTypes:
    binaryType = binaryTypes[args.type]
for file in os.listdir(args.directory):
    file = args.directory + "/" + file
    for ext in binaryType.extension:
        if file.upper().endswith(ext):
            data = open(file, "rb").read()
            m = re.findall(
                binaryType.regexPatternString,
                data,
                overlapped=binaryType.overlapped,
            )
            if m:
                print(
                    f'"{file}" had {len(m)} hits when searching for {binaryType.patternDescription}.'
                )
                results.append(
                    f'"{file}" had {len(m)} hits when searching for {binaryType.patternDescription}.\n'
                )
            break


def sortfunc(e):
    m = re.match(r".*had (.*) hits.*", e)
    if m:
        return int(m.groups()[0])
    return 0


results.sort(key=sortfunc)

resultfile = open("./results.txt", "w")
for result in results:
    resultfile.write(result)
